需求
需求（Requirement）工作流的目标是描述系统应该做什么，并使开发人员和用户就这一描述达成共识。为了达到该目标，要对需要的功能和约束进行提取、组织、文档化；最重要的是理解系统所解决问题的定义和范围。
分析和设计
分析和设计（Analysis & Design）工作流将需求转化成未来系统的设计，为系统开发一个健壮的结构并调整设计使其与实现环境相匹配，优化其性能。分析设计的结果是一个设计模型和一个可选的分析模型。设计模型是源代码的抽象，由设计类和一些描述组成。设计类被组织成具有良好接口的设计包（Package）和设计子系统（Subsystem），而描述则体现了类的对象如何协同工作实现用例的功能。设计活动以体系结构设计为中心，体系结构由若干结构视图来表达，结构视图是整个设计的抽象和简化，该视图中省略了一些细节，使重要的特点体现得更加清晰。体系结构不仅仅是良好设计模型的承载媒介，而且在系统的开发中能提高被创建模型的质量。
实现
实现（Implementation）工作流的目的包括以层次化的子系统形式定义代码的组织结构；以组件的形式（源文件、二进制文件、可执行文件）实现类和对象；将开发出的组件作为单元进行测试以及集成由单个开发者（或小组）所产生的结果，使其成为可执行的系统。
测试
测试（Test）工作流要验证对象间的交互作用，验证软件中所有组件的正确集成，检验所有的需求已被正确的实现，识别并确认缺陷在软件部署之前被提出并处理。RUP提出了迭代的方法，意味着在整个项目中进行测试，从而尽可能早地发现缺陷，从根本上降低了修改缺陷的成本。测试类似于三维模型，分别从可靠性、功能性和系统性能来进行。
部署
部署（Deployment）工作流的目的是成功的生成版本并将软件分发给最终用户。部署工作流描述了那些与确保软件产品对最终用户具有可用性相关的活动，包括：软件打包、生成软件本身以外的产品、安装软件、为用户提供帮助。在有些情况下，还可能包括计划和进行beta测试版、移植现有的软件和数据以及正式验收。
配置和变更管理
配置和变更管理工作流描绘了如何在多个成员组成的项目中控制大量的产物。配置和变更管理工作流提供了准则来管理演化系统中的多个变体，跟踪软件创建过程中的版本。工作流描述了如何管理并行开发、分布式开发、如何自动化创建工程。同时也阐述了对产品修改原因、时间、人员保持审计记录。
项目管理
软件项目管理（Project Management）平衡各种可能产生冲突的目标，管理风险，克服各种约束并成功交付使用户满意的产品。其目标包括：为项目的管理提供框架，为计划、人员配备、执行和监控项目提供实用的准则，为管理风险提供框架等。
环境
环境（Environment）工作流的目的是向软件开发组织提供软件开发环境，包括过程和工具。环境工作流集中于配置项目过程中所需要的活动，同样也支持开发项目规范的活动，提供了逐步的指导手册并介绍了如何在组织中实现过程。


整个是以UML为基础的
商业建模部分不要了

一开始 有需求分析 不参与迭代 因为需求较为明确
但是每一个迭代里面要有需求确认和沟通的环节 并确定这个迭代里需要完成的需求
进行需求分析建模 概要设计 详细设计（包含了代码的设计和测试的设计）- 代码实现 测试实现


每一个迭代：
概要设计 详细设计





-------------------------------------------------------

团队对应用领域和开发技术的经验不一
团队开发规模较小

裁剪：
1. 对每个开发人员最初提供的工作产品（文档和代码）进行同行评审
2.将任务划分为更多独立的小任务
3.在安排进度时应考虑开发人员学习掌握技术的时间
4.制定培训计划并进行培训
5.可以适当减少开发基线中需要配置的配置项
 全：
    （1）软件项目计划。
　　（2）软件需求规格说明、图形分析模型、快速原型。
　　（3）初步的用户手册。
　　（4）设计规格说明。
　　（5）源代码清单。
　　（6）测试计划和过程、测试用例和测试结果记录。
　　（7）操作和安装手册。
　　（8）可执行程序（可执行的模块代码、链接的模块）。
　　（9）数据库描述（模式和文件结构、初始内容）。
　　（10）正式的用户手册。
　　（11）维护文档（软件问题报告、维护请求、工程变更次序）。
　　（12）软件开发总结。
     软件工具列入配置之中，即特定版本的编辑器、编译器和其他CASE工具被“固定”作为软件配置的一部分。因为这些工具被用于生成文档、源代码和数据，因此在对软件配置进行变更时，必须用到它们。如果编译程序的版本不同，可能产生和原版本不同的结果。所以，工具就像它们辅助产生的软件一样，可以被基线化，并作为综合的配置管理过程的一部分。

・裁剪了以后 画出流程图放入

